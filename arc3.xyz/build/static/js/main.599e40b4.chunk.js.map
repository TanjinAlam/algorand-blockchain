{"version":3,"sources":["lib/algorand.ts","lib/ipfs.ts","lib/validator.ts","lib/nft.ts","lib/config.ts","lib/metadata.ts","Minter.tsx","AlgorandWalletConnector.tsx","MediaDisplay.tsx","NFTViewer.tsx","Collection.tsx","NetworkSelector.tsx","App.tsx","index.tsx"],"names":["getClient","activeConf","ac","conf","token","algodToken","host","algod","port","algodPort","algosdk","Algodv2","setOrUndef","addr","undefined","createToken","wallet","md","a","getDefaultAccount","getSuggested","suggested","create_txn","makeAssetCreateTxnWithSuggestedParamsFromObject","from","assetName","name","unitName","assetURL","url","assetMetadataHash","toHash","manager","reserve","clawback","freeze","total","Math","pow","decimals","defaultFrozen","suggestedParams","signTxn","create_txn_s","sendWait","result","rounds","getTransactionParams","do","txParams","lastRound","getToken","assetId","getAssetByID","getCollection","address","accountInformation","results","plist","push","console","log","Promise","all","assets","collectionRequests","map","NFT","fromToken","signed","client","sendRawTransaction","t","blob","txId","waitForConfirmation","error","putToIPFS","file","storage","Web3Storage","endpoint","put","wrapWithDirectory","mediaAdded","ipfsURL","mediaType","image","animation_url","toFile","getMimeTypeFromIpfs","req","Request","method","fetch","resp","headers","get","getMetaFromIpfs","body","text","parsed","JSON","parse","Metadata","validators","nft","urlMimeType","JSON_TYPE","metadataHash","Buffer","metadata","toString","validArc3","valid","validateArc3","length","tests","k","pass","ARC3_URL_SUFFIX","METADATA_FILE","asaURL","cid","resolveProtocol","reserveAddr","endsWith","slice","chunks","split","startsWith","cidComponents","cidCodecCode","cidVersion","cidCodec","asaField","cidHash","decodeAddress","mhdigest","digest","mfsha2","code","publicKey","CID","create","parseInt","join","ipfsGateway","mediaIntegrity","arrayBuffer","buff","bytes","Uint8Array","hash","sha256","Token","id","creator","this","p","params","index","mediaURL","substring","asset_id","fromAssetId","fromParams","require","getAddrUrl","idx","blockExplorer","getAsaUrl","activeConfKey","sessionGetActiveConf","sessionStorage","getItem","sessionSetActiveConf","setItem","getTypeFromMimeType","filetype","type","omitRawAndEmpty","v","args","_raw","description","image_integrity","image_mimetype","background_color","external_url","external_url_integrity","external_url_mimetype","animation_url_integrity","animation_url_mimetype","extra_metadata","localization","properties","Object","assign","fmt","hasOwnProperty","update","md_blob","Blob","File","stringify","mimeType","Minter","props","history","useHistory","React","meta","setMeta","loading","setLoading","mediaSrc","setMediaSrc","fileObj","setFileObj","extraProps","setExtraProps","extraPropsVisible","setExtraPropsVisible","extraParamsVisible","setExtraParamsVisible","setCID","isMinting","setIsMinting","setToken","captureMetadata","alert","handleSetTokenParams","e","tgt","target","value","checked","handleExtraPropUpdate","dataset","handleSetMyAddress","label","sw","eprops","reduce","ep","integ","className","elevation","Elevation","TWO","Uploader","setFile","reader","FileReader","onload","readAsDataURL","metaObj","size","helperText","labelFor","labelInfo","placeholder","onChange","rows","cols","event","onClick","minimal","outlined","large","isOpen","inline","defaultValue","min","max","fill","onValueChange","rightElement","intent","icon","splice","handleExtraPropRemove","rightIcon","MintDialog","handleSetNFT","handleCancelMint","MediaDisplay","controls","src","alt","disabled","onInputChange","stopPropagation","preventDefault","files","item","isLoading","setIsLoading","title","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","interval","connected","then","success","setInterval","clearInterval","walletOptions","entries","img","darkMode","displayName","onClose","addr_list","accts","substr","setAccountIndex","iconProps","accountIndex","media","NFTViewer","useParams","setNFT","loaded","setLoaded","subscribed","mdProps","language","style","docco","wrapLongLines","arc3Invalids","test","rel","href","THREE","Collection","collection","setCollection","nfts","filter","NetworkSelector","network_list","cfg","selectNetwork","App","URLSearchParams","location","search","findIndex","useState","setActiveConf","setSessionWallet","accountList","setAccounts","setConnected","collectionLink","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","exact","path","children","createBrowserHistory","ReactDOM","render","StrictMode","window","document","getElementById"],"mappings":"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","file":"static/js/main.599e40b4.chunk.js","sourcesContent":["import { Wallet } from 'algorand-session-wallet';\nimport algosdk, {Algodv2, makeAssetCreateTxnWithSuggestedParamsFromObject} from 'algosdk'\nimport { NFT, Token } from './nft';\nimport { Metadata } from './metadata'\nimport { conf } from './config'\n\nfunction getClient(activeConf: number): Algodv2 {\n  const ac = conf[activeConf]\n  const token = ac.algodToken?ac.algodToken:\"\"\n  const host = ac.algod?ac.algod:\"\"\n  const port = ac.algodPort?ac.algodPort:0\n  return new algosdk.Algodv2(token, host, port)\n}\n\nfunction setOrUndef(addr: string): string | undefined {\n  return addr===\"\"?undefined:addr\n}\n\nexport async function createToken(wallet: Wallet, activeConf: number, token: Token, md: Metadata): Promise<number> {\n    const addr      = wallet.getDefaultAccount()\n    const suggested = await getSuggested(activeConf, 100)\n\n    const create_txn =  makeAssetCreateTxnWithSuggestedParamsFromObject({\n        from: addr,\n        assetName: md.name,\n        unitName: md.unitName,\n        assetURL: token.url,\n        assetMetadataHash: md.toHash(),\n        manager: setOrUndef(token.manager),\n        reserve: setOrUndef(token.reserve),\n        clawback: setOrUndef(token.clawback),\n        freeze: setOrUndef(token.freeze),\n        total: Math.pow(10, token.decimals),\n        decimals: token.decimals,\n        defaultFrozen: token.defaultFrozen,\n        suggestedParams: suggested\n    })\n\n    const [create_txn_s]  = await wallet.signTxn([create_txn])\n\n    const result = await sendWait(activeConf, [create_txn_s])\n    return result['asset-index']\n}\n\nexport async function getSuggested(activeConf: number, rounds: number) {\n    const txParams = await getClient(activeConf).getTransactionParams().do();\n    return { ...txParams, lastRound: txParams['firstRound'] + rounds }\n}\n\nexport async function getToken(activeConf: number, assetId: number): Promise<any> {\n  return await getClient(activeConf).getAssetByID(assetId).do()\n}\n\nexport async function getCollection(activeConf: number, address: string): Promise<any[]> {\n  const results = await getClient(activeConf).accountInformation(address).do()\n\n  const plist = []\n  for(const a in results['assets']){\n    if(results['assets'][a]['amount']>0)\n      plist.push(getToken(activeConf, results['assets'][a]['asset-id']))\n  }\n\n  console.log(results)\n  console.log(plist)\n\n  const assets = await Promise.all(plist)\n  const collectionRequests = assets.map((a)=>{ return NFT.fromToken(activeConf, a) })\n  return Promise.all(collectionRequests)\n}\n\nexport async function sendWait(activeConf: number, signed: any[]): Promise<any> {\n    const client = getClient(activeConf)\n    try {\n        const {txId} = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n        const result = await algosdk.waitForConfirmation(client, txId, 3)\n        return result \n    } catch (error) { \n        console.error(error)\n    }\n\n    return undefined \n}","import { ipfsURL } from './nft'\nimport {Metadata} from './metadata'\n\n/*\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\n We just use the prebuilt one but with no types we have to just ignore the issue for now\n//import { Web3Storage } from 'web3.storage'\n*/\n// @ts-ignore\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\n\n\nexport async function putToIPFS(activeConf: number, file: File, md: Metadata): Promise<string> {\n    // Uncomment this line after you've set your storage token\n    //const storage = new Web3Storage({token: conf[activeConf].storageToken})\n\n    // We hide the token for this site behind a cloudflare worker so no sneaky petes can delete our precious files\n    const storage = new Web3Storage({token: \" \", endpoint:\"https://worker.barnji.workers.dev\"})\n    const mediaAdded = await storage.put([file], {wrapWithDirectory: false})\n    ipfsURL(mediaAdded)\n    switch(md.mediaType()){\n        case 'image':\n            md.image = ipfsURL(mediaAdded)\n            break\n        case 'audio':\n            md.animation_url = ipfsURL(mediaAdded)\n            break\n        case 'video':\n            md.animation_url = ipfsURL(mediaAdded)\n            break\n    }\n\n    return await storage.put([md.toFile()], {wrapWithDirectory: false})\n}\n\n\nexport async function getMimeTypeFromIpfs(url: string): Promise<string> {\n    const req = new Request(url, { method:\"HEAD\" })\n    const resp = await fetch(req)\n    return resp.headers.get(\"Content-Type\")\n}\n\n\nexport async function getMetaFromIpfs(url: string): Promise<Metadata> {\n    const req = new Request(url)\n    const resp = await fetch(req)\n    const body = await resp.blob()\n    const text = await body.text()\n    const parsed = JSON.parse(text)\n    return new Metadata({\"_raw\":text, ...parsed}) \n}\n\n\n","import {NFT, JSON_TYPE} from './nft'\n\nfunction mdurl(nft: NFT): boolean {\n    return nft.urlMimeType === JSON_TYPE \n}\n\nfunction mdhash(nft: NFT): boolean {\n    return nft.token.metadataHash === Buffer.from(nft.metadata.toHash(true)).toString(\"base64\") ||\n            nft.token.metadataHash === Buffer.from(nft.metadata.toHash()).toString(\"base64\")\n}\n\nfunction total(nft: NFT): boolean {\n    return (nft.token.total / Math.pow(10, nft.token.decimals)) === 1\n}\n\n// TODO: Check that metadata contains correct fields\n// TODO: Check that integrity hashes are valid\n\nconst validators = {\n    \"URL Points to metadata\": mdurl,\n    \"Metadata Hash matches\":mdhash,\n    \"Total Supply Is 1\": total,\n}\n\n\nexport function validArc3(nft: NFT): boolean {\n    if(!nft.valid()) return false\n\n    return validateArc3(nft).length === 0\n}\n\ninterface Arc3Test {\n    name: string\n    pass: boolean\n}\n\nexport function validateArc3(nft: NFT): Arc3Test[] {\n    const tests = []\n    for(const k in validators){\n        tests.push({name:k,pass:validators[k](nft)})\n    }\n    return tests \n}","import { createToken, getToken } from './algorand'\nimport { getMetaFromIpfs, getMimeTypeFromIpfs } from './ipfs'\nimport { sha256 } from 'js-sha256'\nimport { Wallet } from 'algorand-session-wallet'\nimport { conf } from './config'\nimport { Metadata } from './metadata'\nimport { decodeAddress } from 'algosdk'\nimport { CID } from 'multiformats/cid'\nimport * as mfsha2 from 'multiformats/hashes/sha2'\nimport * as digest from 'multiformats/hashes/digest'\nimport { CIDVersion } from 'multiformats/types/src/cid'\n// import { CIDVersion } from 'multiformats'\n\n/*\n\nThe following is a class and metadata type to support the ARC-0003 standard\nset forth by the Algorand Foundation and Community\n\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\n\n*/\n\nexport const ARC3_NAME_SUFFIX = '@arc3'\nexport const ARC3_URL_SUFFIX = '#arc3'\nexport const METADATA_FILE = 'metadata.json'\nexport const JSON_TYPE = 'application/json'\n\nexport function asaURL (cid: string): string { return ipfsURL(cid) + ARC3_URL_SUFFIX }\n\nexport function ipfsURL (cid: string): string { return 'ipfs://' + cid }\n\nexport function fileURL (activeConf: number, cid: string, name: string): string { return conf[activeConf].ipfsGateway + cid + '/' + name }\n\nexport function resolveProtocol (activeConf: number, url: string, reserveAddr: string): string {\n\n    if (url.endsWith(ARC3_URL_SUFFIX))\n        url = url.slice(0, url.length - ARC3_URL_SUFFIX.length)\n\n    let chunks = url.split('://')\n    console.log('resolve protocol:', url)\n    console.log(chunks)\n    // Check if prefix is template-ipfs and if {ipfscid:..} is where CID would normally be\n    if (chunks[0] === 'template-ipfs' && chunks[1].startsWith('{ipfscid:')) {\n        // Look for something like: template:ipfs://{ipfscid:1:raw:reserve:sha2-256} and parse into components\n        chunks[0] = 'ipfs'\n        const cidComponents = chunks[1].split(':')\n        if (cidComponents.length !== 5) {\n            // give up\n            console.log('unknown ipfscid format')\n            return url\n        }\n        const [, cidVersion, cidCodec, asaField, cidHash] = cidComponents\n\n        // const cidVersionInt = parseInt(cidVersion) as CIDVersion\n        if (cidHash.split('}')[0] !== 'sha2-256') {\n            console.log('unsupported hash:', cidHash)\n            return url\n        }\n        if (cidCodec !== 'raw' && cidCodec !== 'dag-pb') {\n            console.log('unsupported codec:', cidCodec)\n            return url\n        }\n        if (asaField !== 'reserve') {\n            console.log('unsupported asa field:', asaField)\n            return url\n        }\n        let cidCodecCode\n        if (cidCodec === 'raw') {\n            cidCodecCode = 0x55\n        } else if (cidCodec === 'dag-pb') {\n            cidCodecCode = 0x70\n        }\n\n        // get 32 bytes Uint8Array reserve address - treating it as 32-byte sha2-256 hash\n        const addr = decodeAddress(reserveAddr)\n        const mhdigest = digest.create(mfsha2.sha256.code, addr.publicKey)\n\n        const cid = CID.create(parseInt(cidVersion) as CIDVersion, cidCodecCode, mhdigest)\n        console.log('switching to id:', cid.toString())\n        chunks[1] = cid.toString() + '/' + chunks[1].split('/').slice(1).join('/')\n        console.log('redirecting to ipfs:', chunks[1])\n    }\n\n    // No protocol specified, give up\n    if (chunks.length < 2) return url\n\n    //Switch on the protocol\n    switch (chunks[0]) {\n        case 'ipfs': //Its ipfs, use the configured gateway\n            return conf[activeConf].ipfsGateway + chunks[1]\n        case 'https': //Its already http, just return it\n            return url\n        // TODO: Future options may include arweave or algorand\n    }\n\n    return url\n}\n\nexport async function mediaIntegrity (file: File): Promise<string> {\n    const buff = await file.arrayBuffer()\n    const bytes = new Uint8Array(buff)\n    const hash = new Uint8Array(sha256.digest(bytes))\n    return 'sha256-' + Buffer.from(hash).toString('base64')\n}\n\nexport class Token {\n    id: number\n\n    name: string\n    unitName: string\n    url: string\n\n    metadataHash: string\n\n    total: number\n    decimals: number\n\n    creator: string\n\n    manager: string\n    reserve: string\n    clawback: string\n    freeze: string\n\n    defaultFrozen: boolean\n\n    constructor (t: any) {\n        this.id = t.id || 0\n        this.name = t.name || ''\n        this.unitName = t.unitName || ''\n        this.url = t.url || ''\n\n        this.metadataHash = t.metadataHash || ''\n\n        this.total = t.total || 0\n        this.decimals = t.decimals || 0\n\n        this.creator = t.creator || ''\n\n        this.manager = t.manager || ''\n        this.reserve = t.reserve || ''\n        this.clawback = t.clawback || ''\n        this.freeze = t.freeze || ''\n\n        this.defaultFrozen = t.defaultFrozen || false\n    }\n\n    static fromParams (t: any): Token {\n        const p = t.params\n        return new Token({\n            id: t.index,\n            name: p.name || '',\n            unitName: p['unit-name'] || '',\n            url: p.url || '',\n            metadataHash: p['metadata-hash'] || '',\n            total: p.total || 0,\n            decimals: p.decimals || 0,\n            creator: p.creator || '',\n            manager: p.manager || '',\n            reserve: p.reserve || '',\n            clawback: p.clawback || '',\n            freeze: p.freeze || '',\n            defaultFrozen: p['default-frozen'] || false,\n        }) as Token\n\n    }\n\n    valid (): boolean {\n        return this.id > 0 && this.total > 0 && this.url !== ''\n    }\n\n}\n\nexport class NFT {\n    token: Token = new Token({})\n    metadata: Metadata = new Metadata()\n\n    urlMimeType: string\n\n    constructor (md: Metadata, token?: Token, urlMimeType?: string) {\n        this.metadata = md\n        this.token = token\n        this.urlMimeType = urlMimeType\n    }\n\n    static async create (wallet: Wallet, activeConf: number, token: Token, md: Metadata, cid: string): Promise<NFT> {\n        token.url = asaURL(cid)\n        const asset_id = await createToken(wallet, activeConf, token, md)\n        return await NFT.fromAssetId(activeConf, asset_id)\n    }\n\n    static async fromAssetId (activeConf: number, assetId: number): Promise<NFT> {\n        return NFT.fromToken(activeConf, await getToken(activeConf, assetId))\n    }\n\n    static async fromToken (activeConf: number, t: any): Promise<NFT> {\n        const token = Token.fromParams(t)\n        const url = resolveProtocol(activeConf, token.url, token.reserve)\n\n        //TODO: provide getters for other storage options\n        // arweave? note field?\n\n        try {\n            const urlMimeType = await getMimeTypeFromIpfs(url)\n\n            switch (urlMimeType) {\n                case JSON_TYPE:\n                    return new NFT(await getMetaFromIpfs(url), token, urlMimeType)\n            }\n\n            return new NFT(Metadata.fromToken(token), token, urlMimeType)\n        } catch (error) {\n            return new NFT(new Metadata(), token)\n        }\n    }\n\n    valid (): boolean {\n        return this.token.valid() && this.metadata.valid()\n    }\n\n    name (): string {\n        if (this.metadata.valid()) {\n            return this.metadata.name\n        }\n        if (this.token.valid()) {\n            return this.token.name\n        }\n        return ''\n    }\n\n    id (): number {\n        return this.token.valid() ? this.token.id : 0\n    }\n\n    mediaURL (activeConf: number): string {\n        if (!this.valid()) return 'https://dummyimage.com/640x360/fff/aaa'\n\n        // Try to resolve the protocol, if one is set\n        const url = resolveProtocol(activeConf, this.metadata.mediaURL(), this.metadata.reserve)\n\n        // If the url is different, we resolved it correctly\n        if (url !== this.metadata.mediaURL()) return url\n\n        // It may be a relative url stored within the same directory as the metadata file\n        // Lop off the METADATA_FILE bit and append image path\n        if (this.token.url.endsWith(METADATA_FILE)) {\n            const dir = this.token.url.substring(0, this.token.url.length - METADATA_FILE.length)\n            return resolveProtocol(activeConf, dir, this.metadata.reserve) + this.metadata.mediaURL()\n        }\n\n        // give up\n        return url\n    }\n}\n","type Config = {\n    storageToken: string;   // Storage token for web3.storage\n    network: string;        // The network to use for creating nfts\n    ipfsGateway: string;    // The IPFS gateway url for retrieving files\n    algod: string;          // The Algod api url to use\n    algodPort: number;      // The algod api port to use\n    algodToken: string;     // the algod token to use\n    blockExplorer: string; // The Block Explorer to allow linking out to\n}\n\nexport const conf = require(\"../config.json\") as Config[];\n\nexport function getAddrUrl(idx: number, addr: string): string {\n    return conf[idx].blockExplorer + \"address/\" + addr\n}\nexport function getAsaUrl(idx: number, id: number): string {\n    return conf[idx].blockExplorer + \"asset/\" + id\n}\n\nconst activeConfKey = \"active-conf\"\nexport function sessionGetActiveConf(): number {\n    const ac = sessionStorage.getItem(activeConfKey)\n    if(ac === undefined || ac === null) return 0\n    return parseInt(ac)\n}\n\nexport function sessionSetActiveConf(ac: number)  {\n    sessionStorage.setItem(activeConfKey, ac.toString())\n}\n","import {Token, JSON_TYPE, METADATA_FILE} from './nft'\nimport { sha256 } from 'js-sha256'\n\nexport type Properties = {\n    [key: string]: string | number\n}\n\nexport type LocalizationIntegrity = {\n    [key: string]: string\n}\n\nexport type Localization = {\n    uri: string\n    default: string\n    locales: string[]\n    integrity?: LocalizationIntegrity\n}\n\n// Just takes the first chunk of the mimetype (the type)\nexport function getTypeFromMimeType(filetype: string): string {\n    const [type, _] = filetype.split(\"/\")\n    return type\n}\n\nfunction omitRawAndEmpty(k,v){\n    if(k === \"_raw\") return undefined;\n    if(v === \"\") return undefined;\n    return v\n}\n\nexport class Metadata {\n    _raw: string = undefined\n\n    name: string = \"\"\n    description: string = \"\"\n\n    image: string = \"\"\n    decimals?: number = 0\n    unitName?: string = \"\"\n\n    image_integrity?: string = \"\"\n    image_mimetype?: string = \"\"\n\n    reserve?: string = \"\"\n\n    background_color?: string = \"\"\n\n    external_url?: string = \"\"\n    external_url_integrity?: string = \"\"\n    external_url_mimetype?: string = \"\"\n\n    animation_url?: string = \"\"\n    animation_url_integrity?: string = \"\"\n    animation_url_mimetype?: string = \"\"\n\n    extra_metadata?: string = \"\"\n\n    localization?: Localization\n\n    properties?: Properties\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n\n    toHash(fmt: Boolean = false): Uint8Array {\n        if(this.hasOwnProperty(\"extra_metadata\")){\n            //TODO\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\n        }\n\n        if(this._raw === undefined)\n            this._raw = this.toString(false)\n\n        const hash = sha256.create();\n        fmt ? hash.update(this.toString(false)):hash.update(this._raw);\n        return new Uint8Array(hash.digest())\n    }\n\n    valid(): boolean {\n        return this.image !== \"\" || this.animation_url !== \"\" || this.external_url !== \"\"\n    }\n\n    toFile(): File {\n        const md_blob = new Blob([this.toString()], { type: JSON_TYPE })\n        return new File([md_blob], METADATA_FILE)\n    }\n\n    toString(fmt: Boolean = false): string {\n        if(this._raw === undefined) this._raw = JSON.stringify({...this}, omitRawAndEmpty)\n        return JSON.stringify(JSON.parse(this._raw) , omitRawAndEmpty, fmt?2:0)\n    }\n\n    mimeType(): string {\n        if(this.animation_url !== \"\") return this.animation_url_mimetype;\n        if(this.external_url_mimetype !== \"\") return this.external_url_mimetype;\n        return this.image_mimetype\n    }\n\n    mediaType(): string {\n        return getTypeFromMimeType(this.mimeType())\n    }\n\n    mediaURL(): string {\n        if(this.animation_url !== \"\") {\n            return this.animation_url\n        }\n        return this.image\n    }\n\n    static fromToken(t: Token){\n        return new Metadata({name:t.name, image: t.url, decimals: t.decimals, reserve: t.reserve })\n    }\n\n}\n","import * as React from 'react'\nimport { InputGroup, Button, Elevation, FileInput, Card, Dialog, Classes, Collapse, NumericInput, FormGroup, Switch } from \"@blueprintjs/core\"\nimport {  NFT, Token, mediaIntegrity } from './lib/nft'\nimport {Metadata} from './lib/metadata'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport { putToIPFS } from './lib/ipfs'\nimport{ useHistory } from 'react-router-dom'\nimport { getTypeFromMimeType } from './lib/metadata'\n\nexport type MinterProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function Minter(props: MinterProps){\n\n    const history = useHistory()\n\n    const [meta, setMeta]               = React.useState(new Metadata())\n    const [loading, setLoading]         = React.useState(false)\n    const [mediaSrc, setMediaSrc]           = React.useState<string>();\n    const [fileObj, setFileObj]         = React.useState<File>();\n\n    const [extraProps, setExtraProps]   = React.useState([])\n    const [extraPropsVisible, setExtraPropsVisible] = React.useState(false)\n\n    const [extraParamsVisible, setExtraParamsVisible] = React.useState(false)\n\n    // For MintDialog\n    const [cid, setCID]                 = React.useState(\"\")\n    const [isMinting, setIsMinting]     = React.useState(false)\n\n    const [token, setToken]             = React.useState(new Token({}))\n\n    function setFile(file: File) {\n        setFileObj(file)\n\n        const reader = new FileReader();\n        reader.onload = (e: any) => {  setMediaSrc(e.target.result) }\n        reader.readAsDataURL(file);\n\n        setMeta((meta)=>{\n            const metaObj = {\n                ...meta,\n                properties:{...meta.properties, size:file.size}\n            }\n\n            switch(getTypeFromMimeType(file.type)){\n                case 'audio':\n                    metaObj.animation_url = file.name\n                    metaObj.animation_url_mimetype = file.type\n                    break;\n                case 'video':\n                    metaObj.animation_url = file.name\n                    metaObj.animation_url_mimetype = file.type\n                    break;\n                case 'image':\n                    metaObj.image = file.name\n                    metaObj.image_mimetype = file.type\n                    break;\n            }\n\n            return new Metadata(metaObj)\n        })\n    }\n\n\n    async function mintNFT() {\n        setLoading(true) \n\n        const md = await captureMetadata()\n        setMeta(md)\n        try {\n            const cid = await putToIPFS(props.activeConf, fileObj, md)\n            setCID(cid)\n            setIsMinting(true)\n        } catch (error) {\n            alert(\"Failed to upload media to ipfs :(\")\n            setLoading(false)\n            return\n        }\n\n    }\n\n    function handleCancelMint(){\n        setIsMinting(false)\n        setLoading(false)\n    }\n\n    function handleSetNFT(nft: NFT){ return history.push(\"/nft/\"+nft.token.id) }\n\n    function handleChangeDecimals(v: number){ setToken((token)=>{ return new Token({...token, \"decimals\":v}) }) }\n    function handleSetTokenParams(e) {\n        const tgt = e.target\n        const name = e.target.id\n        const value = tgt.type === \"checkbox\" ? tgt.checked: tgt.value as string \n        setToken((token)=>{ return new Token({...token, [name]:value}) })\n    }\n\n    function handleChangeMeta(event: { target: any; }) {\n        const target = event.target\n        const name = target.name as string\n        const value = target.type === 'checkbox' ? target.checked : target.value as string\n        setMeta((meta)=>{ return  new Metadata({...meta, [name]:value}) })\n    }\n\n    function handleShowExtraProps(){ setExtraPropsVisible(!extraPropsVisible) }\n    function handleShowExtraParams(){ setExtraParamsVisible(!extraParamsVisible) }\n    function handleExtraPropRemove(idx: number) { extraProps.splice(idx, 1); setExtraProps([...extraProps]) }\n    function handleAddExtraProp() { setExtraProps([...extraProps, emptyExtraProp()]) }\n    function emptyExtraProp(){ return { name:\"\", value: \"\" } }\n    function handleExtraPropUpdate(e){\n        const idx=parseInt(e.target.dataset.id)\n        if(e.target.id===\"name\") extraProps[idx][e.target.id]=e.target.value\n        else extraProps[idx][e.target.id] = e.target.value\n        setExtraProps([...extraProps])\n    }\n\n\n    function handleSetMyAddress(label: string){\n        return (e)=>{\n            setToken((token)=>{ \n                const addr = props.sw.getDefaultAccount()\n                if(addr === \"\") alert(\"You need to connect you wallet before you can do this.\")\n                return new Token({...token, [label]: addr})\n            })\n        }\n    }\n\n\n    async function captureMetadata(): Promise<Metadata> {\n        const eprops = extraProps.reduce((all, ep)=>{ return {...all, [ep.name]:ep.value} }, {})\n        const integ = await mediaIntegrity(fileObj)\n\n        const md = {\n            ...meta,\n            name:           token.name,\n            unitName:       token.unitName,\n            decimals:       token.decimals,\n            description:    meta.description,\n            properties:     { ...eprops, ...meta.properties}\n        } as Metadata\n\n        switch(getTypeFromMimeType(meta.mediaType())) {\n            case 'image':\n                md.image_integrity = integ\n                break;\n            case 'audio':\n                md.animation_url_integrity = integ\n                break;\n            case 'video':\n                md.animation_url_integrity = integ\n                break;\n        }\n\n        return new Metadata(md)\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.TWO} className='mint-card' >\n                <Uploader\n                    mediaSrc={mediaSrc}\n                    file={fileObj}\n                    setFile={setFile}\n                    {...meta} />\n\n                <div className='container' >\n                    <FormGroup \n                        helperText=\"The Name for this asset\"\n                        label=\"Name\"\n                        labelFor=\"name\"\n                        labelInfo=\"(required)\" >\n                        <InputGroup\n                            name='name'\n                            placeholder='Name'\n                            className='details-basic details-title bp3-InputGroup bp3-large'\n                            onChange={handleSetTokenParams}\n                            type='text'\n                            id='name'\n                            value={token.name} />\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"The Unit Name for this asset \"\n                        label=\"Unit Name\"\n                        labelFor=\"unitName\"\n                        labelInfo=\"(required)\" >\n                        <InputGroup\n                            name='unitName'\n                            placeholder='Unit Name'\n                            className='details-basic details-title bp3-InputGroup bp3-large'\n                            onChange={handleSetTokenParams}\n                            type='text'\n                            id='unitName'\n                            value={token.unitName} />\n                    </FormGroup>\n                </div>\n\n                <div className='container'>\n                    <FormGroup \n                        helperText=\"A description of this asset\"\n                        label=\"Description\"\n                        labelFor=\"description\"\n                        labelInfo=\"(required)\" >\n                        <textarea\n                            rows={10}\n                            cols={30}\n                            placeholder='Description'\n                            className='details-description bp3-InputGroup bp3-large'\n                            onChange={handleChangeMeta}\n                            name='description'\n                            id='description'\n                            value={meta.description} />\n                    </FormGroup>\n                </div>\n\n                <div className='container extra-param-dropdown'>\n                    <Button \n                        onClick={handleShowExtraParams}  \n                        minimal={true} \n                        outlined={true} \n                        large={true}\n                        text={extraParamsVisible?\"Hide extra parameters\":\"Show extra parameters\"} \n                    />\n                    <Collapse isOpen={extraParamsVisible}>\n                        <div className='container extra-param-list'>\n\n                        <FormGroup \n                            inline={true}\n                            helperText=\"A value of >0 is considered a 'Fractional NFT'\"\n                            label=\"Decimals\" labelFor=\"decimals\" >\n                            <NumericInput \n                                defaultValue={0} min={0} max={19} \n                                name='decimals'\n                                id='decimals' \n                                fill={true}\n                                onValueChange={handleChangeDecimals} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            label=\"Default Frozen\" labelFor=\"default-frozen\" >\n                            <Switch large={true} name='default-frozen' id='defaultFrozen'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Manager Address for this asset\" \n                            label=\"Manager Address\" labelFor=\"manager\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('manager')} />}\n                            value={token.manager}\n                            name='manager' id='manager'   type='text' onChange={handleSetTokenParams}/>\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Reserve Address for this asset\" \n                            label=\"Reserve Address\" labelFor=\"reserve\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('reserve')} />}\n                            value={token.reserve}\n                            name='reserve' id='reserve'   type='text'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Clawback Address for this asset\" \n                            label=\"Clawback Address\" labelFor=\"clawback\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('clawback')} />}\n                            value={token.clawback}\n                            name='clawback' id='clawback'   type='text'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Freeze Address for this asset\" \n                            label=\"Freeze Address\" labelFor=\"freeze\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('freeze')} />} value={token.freeze}\n                            name='freeze' id='freeze'  type='text'  onChange={handleSetTokenParams}/>\n                        </FormGroup>\n                        </div>\n\n                    </Collapse>\n                </div>\n\n                <div className='container extra-prop-dropdown'>\n                    <Button \n                        onClick={handleShowExtraProps}  \n                        minimal={true} \n                        outlined={true} \n                        large={true}\n                        text={extraPropsVisible?\"Hide extra props\":\"Show extra props\"} \n                    />\n                    <Collapse isOpen={extraPropsVisible} className='extra-prop-collapse'>\n                        <p>Add string keys and values</p>\n                        <ul className='extra-prop-list'>\n                        { \n                            extraProps.map((props, idx)=>{ \n                                return (\n                                <li className='extra-prop-item' key={idx} >\n                                    <div className='extra-prop-container'>\n                                        <InputGroup \n                                            id=\"name\" \n                                            data-id={idx}\n                                            name=\"name\" \n                                            value={props.name}  \n                                            onChange={handleExtraPropUpdate} \n                                            className='details-basic details-artist bp3-InputGroup bp3-large' />\n                                        <InputGroup \n                                            id=\"value\" \n                                            name=\"value\" \n                                            data-id={idx}\n                                            value={props.value} \n                                            onChange={handleExtraPropUpdate} \n                                            className='details-basic details-artist bp3-InputGroup bp3-large' />\n                                        <Button minimal={true} intent='danger' icon='cross' onClick={()=>{ handleExtraPropRemove(idx) }}  />\n                                    </div>\n                                </li>\n                                )\n                            })\n                        }\n                        </ul>\n                        <Button fill={true} icon='plus' intent='primary' minimal={true} onClick={handleAddExtraProp} className='extra-prop-add' />\n                    </Collapse>\n                </div>\n\n                <div className='container custom-note-field'>\n\n                </div>\n\n                <div className='container container-mint'>\n                    <Button loading={loading}\n                        onClick={mintNFT}\n                        rightIcon='clean'\n                        large={true}\n                        minimal={true}\n                        outlined={true}\n                        intent='success'\n                        text='Mint' />\n                </div>\n            </Card>\n            <MintDialog \n                activeConf={props.activeConf}\n                token={token}\n                isMinting={isMinting} \n                cid={cid} \n                md={meta} \n                sw={props.sw}  \n                handleSetNFT={handleSetNFT}\n                handleCancelMint={handleCancelMint} \n                ></MintDialog>\n        </div>\n    )\n\n}\n\n\ntype MediaDisplayProps = {\n    mimeType: string\n    mediaSrc: string | undefined\n}\n\nfunction MediaDisplay(props: MediaDisplayProps){\n    const [type, _] = props.mimeType.split(\"/\")\n\n    switch(type) {\n        case \"audio\":\n            return (\n                <audio id=\"uploaded-media\" controls>\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </audio>\n            )\n        case \"video\":\n            return (\n                <video id=\"uploaded-media\" controls>\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </video>\n            )\n        default:\n            return (\n                <img id=\"uploaded-media\" alt=\"NFT\" src={props.mediaSrc} />\n            )\n    }\n}\n\ntype UploaderProps = {\n    mediaSrc: string | undefined\n    file: File\n    setFile(f: File): void\n};\n\nfunction Uploader(props: UploaderProps) {\n    function captureFile(event: any) {\n        event.stopPropagation()\n        event.preventDefault()\n        props.setFile(event.target.files.item(0))\n    }\n\n    if (props.mediaSrc === undefined || props.mediaSrc === \"\" ) return (\n        <div className='container'>\n            <div className='content content-piece' >\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\n            </div>\n        </div>\n    )\n\n\n\n    return (\n        <div className='container' >\n            <div className='content content-piece'>\n                <MediaDisplay mimeType={props.file.type} mediaSrc={props.mediaSrc} />\n            </div>\n        </div>\n    )\n}\n\ntype MintDialogProps = {\n    activeConf: number\n    isMinting: boolean\n    cid: string\n    md: Metadata\n    sw: SessionWallet\n    token: Token \n    handleSetNFT(NFT)\n    handleCancelMint()\n}\n\nfunction MintDialog(props: MintDialogProps){\n    const [isLoading, setIsLoading] = React.useState(false)\n\n    function cancel(){\n        setIsLoading(false)\n        props.handleCancelMint()\n    }\n\n    async function mint(){\n        try {\n            setIsLoading(true)\n            const nft = await NFT.create(props.sw.wallet, props.activeConf, props.token, props.md, props.cid)\n            setIsLoading(false)\n            props.handleSetNFT(nft)\n        } catch (error) {\n           alert(\"Failed to create nft: \"+error) \n           setIsLoading(false)\n           props.handleCancelMint()\n        }\n    }\n\n    return (\n        <Dialog isOpen={props.isMinting} title=\"Mint it\" >\n            <div className={Classes.DIALOG_BODY}>\n                <p>File uploaded to ipfs {props.md.mediaURL()} </p>\n                <p>Click \"Mint\" to create ASA</p>\n            </div>\n            <div className={Classes.DIALOG_FOOTER}>\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                    <Button loading={isLoading} onClick={cancel}>Cancel</Button>\n                    <Button loading={isLoading} onClick={mint}>Mint</Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        if(k === 'insecure-wallet') continue\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import { getTypeFromMimeType } from \"./lib/metadata\"\n\ntype MediaDisplayProps = {\n    mimeType: string\n    mediaSrc: string | undefined\n}\n\nexport function MediaDisplay(props: MediaDisplayProps){\n    const type = getTypeFromMimeType(props.mimeType)\n\n    let media = <div></div>\n    switch(type) {\n        case \"audio\":\n           media = (\n                <audio id=\"uploaded-media\" controls>\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </audio>\n            )\n            break;\n        case \"video\":\n            media = (\n                <video id=\"uploaded-media\" controls>\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </video>\n            )\n            break;\n        default:\n            media = (\n                <img id=\"uploaded-media\" alt=\"NFT\" src={props.mediaSrc} />\n            )\n    }\n\n    return (\n        <div className='media-display content' >\n            {media}\n        </div>\n    )\n}","import * as React from 'react'\nimport { Elevation, Card, Icon } from \"@blueprintjs/core\"\nimport { NFT, resolveProtocol  } from './lib/nft'\nimport { Metadata } from './lib/metadata'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { getAddrUrl, getAsaUrl } from './lib/config'\nimport { validateArc3 } from './lib/validator'\nimport {MediaDisplay} from './MediaDisplay'\n\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { docco } from  'react-syntax-highlighter/dist/esm/styles/hljs'\n\nexport type NFTViewerProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function NFTViewer(props: NFTViewerProps) {\n    const {assetId} = useParams()\n\n    const [nft, setNFT] = React.useState(new NFT(new Metadata()))\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n        let subscribed = true\n        NFT.fromAssetId(props.activeConf, assetId).then((nft)=>{\n            if(!subscribed) return\n            setNFT(nft)\n            setLoaded(true)\n        })\n\n        return ()=>{ subscribed = false }\n    }, [assetId, props.activeConf])\n\n    let media = <div></div>\n    let meta = <div></div>\n\n    if(loaded){\n        console.log(nft)\n        media = <MediaDisplay mimeType={nft.metadata.mimeType()} mediaSrc={nft.mediaURL(props.activeConf)} />\n\n        const mdProps = nft.metadata && nft.metadata[\"_raw\"] !== undefined?(\n            <div className='raw-metadata'>\n                <SyntaxHighlighter language='json' style={docco} wrapLongLines={true}  >\n                    {nft.metadata.toString(true)}\n                </SyntaxHighlighter>\n            </div>\n        ):<p>No metadata</p>\n\n        const arc3Invalids = validateArc3(nft).map(test=>{\n            if(test.pass)\n                return (<li key={test.name} >  <Icon icon='tick' intent='success' /> <b>{test.name}</b></li>)\n\n            return (<li key={test.name} > <Icon icon='cross' intent='danger' /> <b>{test.name}</b> </li>)\n        })\n\n        meta = (\n        <div>\n            <h5>Token Parameters</h5>\n            <div className='content'>\n                <table>\n                    <tbody>\n                        <tr><td><b>ASA id: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAsaUrl(props.activeConf, nft.token.id)} >{nft.token.id}</a></td></tr>\n                        <tr><td><b>Name:</b></td><td>{nft.token.name}</td></tr>\n                        <tr><td><b>Unit Name:</b></td><td>{nft.token.unitName}</td></tr>\n                        <tr><td><b>Total:</b></td><td>{nft.token.total}</td></tr>\n                        <tr><td><b>Decimals:</b></td><td>{nft.token.decimals}</td></tr>\n                        <tr><td><b>URL:     </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={resolveProtocol(props.activeConf, nft.token.url, nft.token.reserve)} >{nft.token.url}</a></td></tr>\n                        <tr><td><b>Creator: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.creator)}  >{nft.token.creator}</a></td></tr>\n                        <tr><td><b>Manager: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.manager)}  >{nft.token.manager}</a></td></tr>\n                        <tr><td><b>Reserve: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.reserve)}  >{nft.token.reserve}</a></td></tr>\n                        <tr><td><b>Freeze:  </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.freeze) }  >{nft.token.freeze }</a></td></tr>\n                        <tr><td><b>Clawback:</b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.clawback)} >{nft.token.clawback}</a></td></tr>\n                        <tr><td><b>Metadata Hash: </b></td><td>{nft.token.metadataHash}</td></tr>\n                        <tr><td><b>Default Frozen: </b></td><td>{nft.token.defaultFrozen?\"Yes\":\"No\"}</td></tr>\n                    </tbody>\n                </table>\n            </div>\n            <hr/>\n            <h5>Metadata</h5>\n            <div className='content'>\n                {mdProps}\n            </div>\n            <hr/>\n            <h5>ARC3 tests:</h5>\n            <div className='content'>\n                <ul>\n                    {arc3Invalids}\n                </ul>\n            </div>\n        </div>\n        )\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.THREE} >\n                <div className='container'>\n                    <div className='content content-piece'>\n                        {media}\n                    </div>\n                    <div className='content-info'>\n                        {meta}\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}\n","import * as React from 'react'\nimport { Elevation, Card, AnchorButton } from \"@blueprintjs/core\"\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { conf } from './lib/config'\nimport {getCollection} from './lib/algorand' \nimport { validArc3 } from './lib/validator'\nimport { MediaDisplay } from './MediaDisplay'\n\nexport type CollectionProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function Collection(props: CollectionProps) {\n    const {address} = useParams()\n\n    const [collection, setCollection] = React.useState([])\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n        console.log(address)\n        getCollection(props.activeConf, address).then((collection)=>{\n            setCollection(collection)\n            setLoaded(true)\n        })\n\n    }, [address, props.activeConf])\n\n    let nfts = [<h3 key='looking'>Checking for NFTs...</h3>]\n\n    if(loaded ){\n        if(collection.length>0){\n            nfts = collection.filter((nft)=>{\n                return nft.id() !== 0\n            }).map((nft)=>{\n                const icon = validArc3(nft)?\"confirm\":\"circle\"\n                return (\n                <Card className='content-collection-item' key={nft.id()} elevation={Elevation.TWO}>\n                    <MediaDisplay mediaSrc={nft.mediaURL(props.activeConf)} mimeType={nft.metadata.mimeType()} />\n                    <AnchorButton icon={icon} minimal={true} href={'/nft/'+nft.id()}><b>{nft.name()}</b></AnchorButton>\n                </Card>\n                )\n            })\n        }else{\n            nfts = [<h3 key='none'>You dont have any ARC3 compliant NFTs on {conf[props.activeConf].network}, <a href='/mint'>Mint one?</a></h3>]\n        }\n    }\n    return (\n    <div className='container'>\n        <div className='content content-collection'>\n            {nfts}\n        </div>\n    </div>\n    )\n}","import { HTMLSelect } from '@blueprintjs/core'\nimport React from 'react'\nimport {conf} from './lib/config'\n\ninterface NetworkSelectorProps {\n    activeConf: number\n    selectNetwork(network: number)\n}\n\nexport function NetworkSelector(props: NetworkSelectorProps){\n\n    function handleSelectNetwork(e){\n        props.selectNetwork(parseInt(e.target.value))\n    }\n\n    const network_list = conf.map((cfg, idx) => {\n        return (<option value={idx} key={idx}> {cfg.network} </option>)\n    })\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleSelectNetwork} \n                minimal={true} \n                defaultValue={props.activeConf} >\n                {network_list}\n            </HTMLSelect>\n        </div>\n    )\n}","import { AnchorButton, Alignment, Navbar } from '@blueprintjs/core';\nimport { SessionWallet } from 'algorand-session-wallet';\nimport React from 'react';\nimport {Minter} from './Minter';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport {NFTViewer} from './NFTViewer'\nimport {Collection} from './Collection'\nimport { conf, sessionGetActiveConf, sessionSetActiveConf } from './lib/config';\nimport {NetworkSelector} from './NetworkSelector'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\n\ntype AppProps = {\n  history: History,\n  location: Location,\n}\n\nfunction App(props: AppProps) {\n\n  const network = new URLSearchParams(props.location.search).get('network');\n  if (network) {\n    const idx = conf.findIndex(cfg => cfg.network === network);\n    if(idx > -1) {\n      sessionSetActiveConf(idx);\n    }\n  }\n\n  const [activeConf, setActiveConf] = React.useState(sessionGetActiveConf())\n\n  const sw = new SessionWallet(conf[activeConf].network)\n\n\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n  const [accts, setAccounts] = React.useState(sw.accountList())\n  const [connected, setConnected] = React.useState(sw.connected())\n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  function selectNetwork(idx: number){ \n    sessionSetActiveConf(idx)\n    setActiveConf(idx) \n  }\n\n  let collectionLink = <div></div>\n  if(connected){\n    collectionLink = <AnchorButton minimal={true} icon='folder-open' href={'/collection/'+sw.getDefaultAccount()} text='Collection' />\n  }\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>ARC3.xyz</Navbar.Heading>\n          <Navbar.Divider />\n          <AnchorButton minimal={true} icon='git-branch' href='https://github.com/barnjamin/arc3.xyz' text='Github' />\n          <AnchorButton minimal={true} icon='clean' href='/mint' text='Mint' />\n          {collectionLink}\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n          <NetworkSelector activeConf={activeConf} selectNetwork={selectNetwork} />\n\n          <AlgorandWalletConnector  \n            darkMode={false}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n\n        </Navbar.Group>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" children={<Minter  activeConf={activeConf} sw={sessionWallet}></Minter>} />\n          <Route exact path=\"/mint\" children={ <Minter  activeConf={activeConf} sw={sessionWallet}></Minter> }/>\n          <Route path=\"/nft/:assetId\" children={ <NFTViewer activeConf={activeConf}  sw={sessionWallet} /> }/>\n          <Route path=\"/collection/:address\" children={ <Collection  activeConf={activeConf} sw={sessionWallet} /> }/>\n        </Switch>\n      </div>\n    </Router>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createBrowserHistory} from \"history\"\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App history={history} location={window.location} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}